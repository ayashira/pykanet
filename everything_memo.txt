This file is a memo of everything.
Note for everyone : please feel free to add information/comments to this file.

=========== 2019/2/17 ============

A first test of kivy+twisted client is implemented.
== Usage ==
python test_kivy_client.py
 
== Functionalities ==
Text entered in the client textInput is sent to the first official server,
the server then sends this text back to the client.
When some data is received by the client, it is displayed in the interface.

== Dependencies ==
Tested in Windows anaconda after installing the following dependencies:
pip install twisted kivy kivy.deps.glew kivy.deps.sdl2

== Fonts and Japanese text ==

Kivy default font supports a very limited set of utf8 characters
-> a Noto font added to the project for that
   File is a bit heavy (18M) but this is not a problem for now

Known problem:
Kivy textInput does not display temporary Japanese words when entering some Japanese text
Maybe support of Japanese will be difficult for now (but this is not an urgent problem)
-> 2019/2/21 : japanese input support is possible with a patch of kivy
   https://qiita.com/dario_okazaki/items/8c6953166b336e83e417
   This patch is already included in kivy master branch, so this problem will be solved with the next release of kivy

== Test on local machine ==

2019/2/22 : client can now be launched with option -lh or --use_localhost to indicate that this is a local test

To run a local test:
1) launch the local server with:
  python test_server.py
3) launch the client with localhost option
  python test_kivy_client.py --use_localhost
  
== Code ==
* test_client.py is now useless. Will be removed soon.
* The code of this first client/server test is a bit messy

=========== 2019/2/18 ============

First version of a real chat !
* multiple clients can connect and messages are sent to all other connected clients
* history is kept on the server and sent to all newly connected clients (but history is lost on server restart)
* this chat is the official communication channel of the project :-)

=========== 2019/2/20 ============
* communication by messages instead of unformatted strings
* message-length now correctly handled in server-side protocol

=========== 2019/2/21 ============
* code refactoring : chat-logic code separated in a Chat_Service class

=========== 2019/2/23 ============
* code refactoring : Distributed_protocol used on both server and client side
* message-length now correctly handled on both server and client side
* important bug found and corrected when processing messages
  when 2 messages were received in the same "data packet", only the first message was processed immediately
  This was causing gradually some delay in processing messages
  -> after correction, chat is now much more reactive

=========== 2019/2/27 ============
* Important code refactoring : chat client logic in a separate file.
  Interface is defined with kv language, network-logic itself with usual python code
* KV language is powerful but not easy to use/understand
  A starting point here:
  https://kivy.org/doc/stable/guide/lang.html  
* Kivy "basic" building blocks are very "basic", so it is not so easy to combine them.
  For example:
   - TextInput does not support markup language to add colors
   - Label support markup language, but has no background, is not scrollable, and text cannot be selected
     -> for now, background and scrollable issues could be solved by defining our own ScrollableLabel classs
* There is now a main screen, with two chat buttons, one for the main chat and one for the test chat.
  The two chats are mainly for demonstrating that the server can handle multiple different chat addresses.
  And also, test chat can be used freely for any test.
  Note : There is no way to go back to the main screen for now :)

* Code architecture is now almost "ready" for contribution even without understanding all the code
  Server code can be added on the model of chat_service.py
  Corresponding client code can be added on the model of chat_client.py 
  
  -> It will be soon possible to discuss of a list of wanted features :)
  
========== Old TODO (DONE) ==================
* add timestamps to the chat (distributed_procol)
  -> DONE
* save chat history in a file (distributed_procol)
  -> DONE
* load chat history from file when server is launched (test_server.py)
  -> DONE
* server-side "chat logic" should be separated from the distributed protocol itself
  -> 2019/2/21: DONE
* start using Twisted AMP protocol (much more powerful for the next steps) instead of current "raw" protocol
  ->DONE, not by using AMP, but by defining our own message passing protocol 
* message-length not correctly handled yet on client-side.
  -> 2019/2/23 : DONE, by merging EchoClient into Distributed_protocol

========== TODO ==================
* add a first version of usernames on client side: maybe just a separate textinput to enter the username without any password for now
* add the username to the communication. Note : we need to switch to Twisted AMP protocol first to do that easily.
  -> messages now always contain a username, but not used yet
* we need a way to update the distant server easily
  (maybe a simple cron job that pull git changes automatically and restart the server)
