This file is a memo of everything.
Note for everyone : please feel free to add information/comments to this file.

=========== 2019/2/17 ============

A first test of kivy+twisted client is implemented.
== Usage ==
python test_kivy_client.py
 
== Functionalities ==
Text entered in the client textInput is sent to the first official server,
the server then sends this text back to the client.
When some data is received by the client, it is displayed in the interface.

== Dependencies ==
Tested in Windows anaconda after installing the following dependencies:
pip install twisted kivy kivy.deps.glew kivy.deps.sdl2

== Fonts and Japanese text ==

Kivy default font supports a very limited set of utf8 characters
-> a Noto font added to the project for that
   File is a bit heavy (18M) but this is not a problem for now

Known problem:
Kivy textInput does not display temporary Japanese words when entering some Japanese text
Maybe support of Japanese will be difficult for now (but this is not an urgent problem)
-> 2019/2/21 : japanese input support is possible with a patch of kivy
   https://qiita.com/dario_okazaki/items/8c6953166b336e83e417
   This patch is already included in kivy master branch, so this problem will be solved with the next release of kivy

== Test on local machine ==

2019/2/22 : client can now be launched with option -lh or --use_localhost to indicate that this is a local test

To run a local test:
1) launch the local server with:
  python test_server.py
3) launch the client with localhost option
  python test_kivy_client.py --use_localhost
  
== Code ==
* test_client.py is now useless. Will be removed soon.
* The code of this first client/server test is a bit messy

=========== 2019/2/18 ============

First version of a real chat !
* multiple clients can connect and messages are sent to all other connected clients
* history is kept on the server and sent to all newly connected clients (but history is lost on server restart)
* this chat is the official communication channel of the project :-)

=========== 2019/2/20 ============
* communication by messages instead of unformatted strings
* message-length now correctly handled in server-side protocol

=========== 2019/2/21 ============
* code refactoring : chat-logic code separated in a Chat_Service class

=========== 2019/2/23 ============
* code refactoring : Distributed_protocol used on both server and client side
* message-length now correctly handled on both server and client side
* important bug found and corrected when processing messages
  when 2 messages were received in the same "data packet", only the first message was processed immediately
  This was causing gradually some delay in processing messages
  -> after correction, chat is now much more reactive

========== TODO ==================
* add timestamps to the chat (distributed_procol)
* save chat history in a file (distributed_procol)
* load chat history from file when server is launched (test_server.py)
* server-side "chat logic" should be separated from the distributed protocol itself
  -> 2019/2/21: DONE
* add a first version of usernames on client side: maybe just a separate textinput to enter the username without any password for now
* start using Twisted AMP protocol (much more powerful for the next steps) instead of current "raw" protocol
  ->DONE, not by using AMP, but by defining our own message passing protocol 
* add the username to the communication. Note : we need to switch to Twisted AMP protocol first to do that easily.
  -> messages now always contain a username, but not used yet
* we need a way to update the distant server easily
  (maybe a simple cron job that pull git changes automatically and restart the server)
* message-length not correctly handled yet on client-side.
  -> 2019/2/23 : DONE, by merging EchoClient into Distributed_protocol
