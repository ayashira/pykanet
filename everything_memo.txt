This file is a memo of everything.
Note for everyone : please feel free to add information/comments to this file.

=========== 2019/2/17 ============

A first test of kivy+twisted client is implemented.
== Usage ==
python test_kivy_client.py
 
== Functionalities ==
Text entered in the client textInput is sent to the first official server,
the server then sends this text back to the client.
When some data is received by the client, it is displayed in the interface.

== Dependencies ==
Tested in Windows anaconda after installing the following dependencies:
pip install twisted kivy kivy.deps.glew kivy.deps.sdl2

== Fonts and Japanese text ==

Kivy default font supports a very limited set of utf8 characters
-> a Noto font added to the project for that
   File is a bit heavy (18M) but this is not a problem for now

Known problem:
Kivy textInput does not display temporary Japanese words when entering some Japanese text
Maybe support of Japanese will be difficult for now (but this is not an urgent problem)

== Test on local machine ==

To run a local test:
1) first set server_address to localhost in network_interface. Option needed in __main__
2) launch the local server with:
  python test_server.py
3) launch the client
  python test_kivy_client.py

== Code ==
* test_client.py is now useless. Will be removed soon.
* The code of this first client/server test is a bit messy

=========== 2019/2/18 ============

First version of a real chat !
* multiple clients can connect and messages are sent to all other connected clients
* history is kept on the server and sent to all newly connected clients (but history is lost on server restart)
* this chat is the official communication channel of the project :-)

=========== 2019/2/20 ============
* communication by messages instead of unformatted strings
* message-length now correctly handled in server-side protocol

========== TODO ==================
* add timestamps to the chat (distributed_procol)
* save chat history in a file (distributed_procol)
* load chat history from file when server is launched (test_server.py)
* server-side "chat logic" should be separated from the distributed protocol itself
* add a first version of usernames on client side: maybe just a separate textinput to enter the username without any password for now
* start using Twisted AMP protocol (much more powerful for the next steps) instead of current "raw" protocol
  ->DONE by defining our own message format
* add the username to the communication. Note : we need to switch to Twisted AMP protocol first to do that easily.
  -> messages now always contain a username, but not used yet
* we need a way to update the distant server easily
  (maybe a simple cron job that pull git changes automatically and restart the server)
* message-length not correctly handled yet on client-side.